if [[ -x `which git` || -x /usr/local/git/bin/git ]]; then
	git_enable=1

	alias g=git

	function git-branch-name () {
		git branch 2> /dev/null | grep '^\*' | sed 's/^\*\ //'
	}
	function git-dirty () {
		git status 2> /dev/null | grep "nothing to commit (working directory clean)"
		echo $?
	}
	function gsrb () {
		branch=$(git-branch-name) 
		git checkout master
		git svn rebase
		git checkout "${branch}"
		git rebase master
	}
	function git-toggle() {
		if [[ $git_enable = 1 ]]; then
			git_enable=0
		else
			git_enable=1
		fi
	}
	function git-prompt() {
		dirty_color=$fg[cyan]
		if [[ $git_enable = 1 ]]; then
			gstatus=$(git status 2> /dev/null)
			branch=$(echo $gstatus | head -n 1 | sed 's/^# On branch //')
			dirty=$(echo $gstatus | sed 's/^#.*$//' | tail -n 2 | grep 'nothing to commit (working directory clean)'; echo $?)
			if [[ x$branch != x ]]; then
				if [[ $dirty = 1 ]] { dirty_color=$fg[magenta] }
				[ x$branch != x ] && echo "[%{$dirty_color%}$branch%{$reset_color%}]"
			fi
		else
			echo "%{$dirty_color%}!%{$reset_color%}"
		fi
	}
	function git-scoreboard () {
		git log | grep Author | sort | uniq -ci | sort -r
	}
	function git-track () {
		branch=$(git-branch-name)
		git config branch.$branch.remote origin
		git config branch.$branch.merge refs/heads/$branch
		echo "tracking origin/$tracking"
	}
	function github-init () {
		git config branch.$(git-branch-name).remote origin
		git config branch.$(git-branch-name).merge refs/heads/$(git-branch-name)
	}
	alias revert='git reset --hard'
	# List ignored files
	alias git-ignored='git-ls-files --others -i --exclude-standard'
	
	function github-url () {
		git config remote.origin.url | sed -En 's/git(@|:\/\/)github.com(:|\/)(.+)\/(.+).git/https:\/\/github.com\/\3\/\4/p'
	}
	
	# Seems to be the best OS X jump-to-github alias from http://tinyurl.com/2mtncf
	function github-go () {
		open $(github-url)
	}
	
	# Function to pull new comment lines
	# BSD sed is junk, otherwise I would have an alternation subexpression
	# like \(#|\/\/\) to let you use different comment delimiters
	function git-comment-diffs () {
		git diff | sed -n -e 's/^\+[[:space:]]*#[[:space:]]*//p'
	}

	# Function to commit all with new comments in message
	function git-commit-comments () {
		git commit -a -m "$(git-comment-diffs)"
	}
else
	# Provide a null git-prompt so we don't error-on-prompt if you don't have git
	function git-prompt () {}
fi
